{"version":3,"file":"index.cjs","sources":["../src/InRange.js","../src/IsDiscount.js","../src/IsEmailTidy.js","../src/IsPrice.js","../src/IsUUID4.js","../src/IsStringDate.js","../src/MinMax.js","../src/MinMaxInt.js","../src/MinMaxLength.js","../src/MinMaxPct.js"],"sourcesContent":["import { \r\n//\r\nbuildMessage, isNumber, max, min, ValidateBy, } from \"class-validator\";\r\nexport const IN_RANGE = \"InRange\";\r\n/**\r\n * Checks if a value is in a range of values.\r\n */\r\nexport function InRange(minValue, maxValue, maxDecimalPlaces, validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [minValue, maxValue, maxDecimalPlaces],\r\n        name: IN_RANGE,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix +\r\n                \"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have $constraint3 max decimal places.\", validationOptions),\r\n            validate(value, args) {\r\n                if (!isNumber(value, { allowInfinity: false, allowNaN: false })) {\r\n                    return false;\r\n                }\r\n                if (!min(value, args.constraints[0])) {\r\n                    return false;\r\n                }\r\n                if (!max(value, args.constraints[1])) {\r\n                    return false;\r\n                }\r\n                if (!isNumber(value, { maxDecimalPlaces: args.constraints[2] })) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nbuildMessage, isNumber, max, min, ValidateBy, } from \"class-validator\";\r\nexport const IS_DISCOUNT = \"IsDiscount\";\r\n/**\r\n * Checks if a value is in a range of values with two decimal places.\r\n */\r\nexport function IsDiscount(validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [0.01, 99.99],\r\n        name: IS_DISCOUNT,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix +\r\n                \"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.\", validationOptions),\r\n            validate(value, args) {\r\n                if (!isNumber(value, { allowInfinity: false, allowNaN: false, maxDecimalPlaces: 2 })) {\r\n                    return false;\r\n                }\r\n                if (!min(value, args.constraints[0])) {\r\n                    return false;\r\n                }\r\n                if (!max(value, args.constraints[1])) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nbuildMessage, isEmail, ValidateBy, } from \"class-validator\";\r\nexport const IS_EMAIL_TIDY = \"isEmailTidy\";\r\n/**\r\n * Checks if the string is an email.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsEmailTidy(options, validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [],\r\n        name: IS_EMAIL_TIDY,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an email\", validationOptions),\r\n            validate: (value) => isEmail(value, {\r\n                allow_ip_domain: false,\r\n                allow_utf8_local_part: false,\r\n                domain_specific_validation: true,\r\n                ignore_max_length: false,\r\n            }),\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nbuildMessage, isNumber, max, min, ValidateBy, } from \"class-validator\";\r\nexport const IS_PRICE = \"IsPrice\";\r\n/**\r\n * Checks if a value is in a range of values with two decimal places.\r\n */\r\nexport function IsPrice(validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [0.01, 70368744177663.99],\r\n        name: IS_PRICE,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix +\r\n                \"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.\", validationOptions),\r\n            validate(value, args) {\r\n                if (!isNumber(value, { allowInfinity: false, allowNaN: false, maxDecimalPlaces: 2 })) {\r\n                    return false;\r\n                }\r\n                if (!min(value, args.constraints[0])) {\r\n                    return false;\r\n                }\r\n                if (!max(value, args.constraints[1])) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nbuildMessage, isUUID, ValidateBy, } from \"class-validator\";\r\nexport const IS_UUID_4 = \"isUUID4\";\r\n/**\r\n * Checks if the string is a UUID version 4.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function IsUUID4(validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [],\r\n        name: IS_UUID_4,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an UUID\", validationOptions),\r\n            validate: (value) => isUUID(value, 4),\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nregisterDecorator, } from \"class-validator\";\r\nexport function IsStringDate(validationOptions) {\r\n    return function ClassValidatorCustomIsStringDate(object, propertyName) {\r\n        registerDecorator({\r\n            constraints: [],\r\n            name: \"IsStringDate\",\r\n            options: {\r\n                message: \"Date should be in [YYYY-MM-DD] format\",\r\n                ...validationOptions,\r\n            },\r\n            propertyName,\r\n            target: object.constructor,\r\n            validator: {\r\n                validate(value) {\r\n                    return typeof value === \"string\" && /^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$/i.test(value);\r\n                },\r\n            },\r\n        });\r\n    };\r\n}\r\n","import { \r\n//\r\nbuildMessage, isNumber, max, min, ValidateBy, } from \"class-validator\";\r\nexport const MIN_MAX = \"MinMax\";\r\n/**\r\n * Checks if a value is in a range of values.\r\n */\r\nexport function MinMax(minValue, maxValue, validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [minValue, maxValue],\r\n        name: MIN_MAX,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix +\r\n                \"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2.\", validationOptions),\r\n            validate(value, args) {\r\n                if (!isNumber(value, { allowInfinity: false, allowNaN: false })) {\r\n                    return false;\r\n                }\r\n                if (!min(value, args.constraints[0])) {\r\n                    return false;\r\n                }\r\n                if (!max(value, args.constraints[1])) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nbuildMessage, isInt, isNumber, max, min, ValidateBy, } from \"class-validator\";\r\nexport const MIN_MAX_INT = \"MinMaxInt\";\r\n/**\r\n * Checks if a value is in a range of integer values.\r\n */\r\n/**\r\n * @name MinMaxInt\r\n * @decorate\r\n * @description Checks is value between two integers inclusive\r\n * @param {Number} minimumInteger - Minimum allowed integer\r\n * @param {Number} maximumInteger - Maximum allowed integer\r\n * @param {Object=} validationOptions\r\n * @constructor\r\n */\r\nexport function MinMaxInt(minimumInteger, maximumInteger, validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [minimumInteger, maximumInteger],\r\n        name: MIN_MAX_INT,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix +\r\n                \"'$property' must be an integer, not be less than $constraint1, not be greater than $constraint2.\", validationOptions),\r\n            validate(value, args) {\r\n                if (!isNumber(value, { allowInfinity: false, allowNaN: false })) {\r\n                    return false;\r\n                }\r\n                if (!min(value, args.constraints[0])) {\r\n                    return false;\r\n                }\r\n                if (!max(value, args.constraints[1])) {\r\n                    return false;\r\n                }\r\n                if (!isInt(value)) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nbuildMessage, maxLength, minLength, ValidateBy, } from \"class-validator\";\r\nexport const MIN_MAX_LENGTH = \"MinMaxLength\";\r\n/**\r\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\r\n * If given value is not a string, then it returns false.\r\n */\r\nexport function MinMaxLength(min, max, validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [min, max],\r\n        name: MIN_MAX_LENGTH,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be longer than $constraint1 characters or equal to $constraint2 characters\", validationOptions),\r\n            validate: (value, args) => {\r\n                if (!minLength(value, args.constraints[0])) {\r\n                    return false;\r\n                }\r\n                if (!maxLength(value, args.constraints[1])) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n    }, validationOptions);\r\n}\r\n","import { \r\n//\r\nbuildMessage, isNumber, max, min, ValidateBy, } from \"class-validator\";\r\nexport const MIN_MAX_PCT = \"MinMaxPct\";\r\n/**\r\n * Checks if a value is in a range of values with two decimal places.\r\n */\r\nexport function MinMaxPct(minValue, maxValue, validationOptions) {\r\n    return ValidateBy({\r\n        constraints: [minValue, maxValue],\r\n        name: MIN_MAX_PCT,\r\n        validator: {\r\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix +\r\n                \"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.\", validationOptions),\r\n            validate(value, args) {\r\n                if (!isNumber(value, { allowInfinity: false, allowNaN: false, maxDecimalPlaces: 2 })) {\r\n                    return false;\r\n                }\r\n                if (!min(value, args.constraints[0])) {\r\n                    return false;\r\n                }\r\n                if (!max(value, args.constraints[1])) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n        },\r\n    }, validationOptions);\r\n}\r\n"],"names":["InRange","minValue","maxValue","maxDecimalPlaces","validationOptions","ValidateBy","constraints","name","validator","defaultMessage","buildMessage","eachPrefix","validate","value","args","isNumber","allowInfinity","allowNaN","min","max","IsDiscount","IsEmailTidy","options","isEmail","allow_ip_domain","allow_utf8_local_part","domain_specific_validation","ignore_max_length","IsPrice","IsStringDate","ClassValidatorCustomIsStringDate","object","propertyName","registerDecorator","message","target","constructor","test","IsUUID4","isUUID","MinMax","MinMaxInt","minimumInteger","maximumInteger","isInt","MinMaxLength","minLength","maxLength","MinMaxPct"],"mappings":"sHAGwB,8BCAG,mCCAE,+BCAL,qLCAC,0BJIlB,SAASA,QAAQC,EAAUC,EAAUC,EAAkBC,UACnDC,aAAW,CACdC,YAAa,CAACL,EAAUC,EAAUC,GAClCI,KAPgB,UAQhBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EACzC,0IAA2IP,GAC/IQ,SAAQ,CAACC,EAAOC,MACPC,WAASF,EAAO,CAAEG,eAAe,EAAOC,UAAU,QAGlDC,MAAIL,EAAOC,EAAKR,YAAY,QAG5Ba,MAAIN,EAAOC,EAAKR,YAAY,OAG5BS,WAASF,EAAO,CAAEV,iBAAkBW,EAAKR,YAAY,SAMnEF,uBCvBA,SAASgB,WAAWhB,UAChBC,aAAW,CACdC,YAAa,CAAC,IAAM,OACpBC,KAPmB,aAQnBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EACzC,iIAAkIP,GACtIQ,SAAQ,CAACC,EAAOC,MACPC,WAASF,EAAO,CAAEG,eAAe,EAAOC,UAAU,EAAOd,iBAAkB,QAG3Ee,MAAIL,EAAOC,EAAKR,YAAY,OAG5Ba,MAAIN,EAAOC,EAAKR,YAAY,OAM1CF,wBCnBA,SAASiB,YAAYC,EAASlB,UAC1BC,aAAW,CACdC,YAAa,GACbC,KARqB,cASrBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EAAa,6BAA8BP,GACxFQ,SAAWC,GAAUU,UAAQV,EAAO,CAChCW,iBAAiB,EACjBC,uBAAuB,EACvBC,4BAA4B,EAC5BC,mBAAmB,MAG5BvB,oBCdA,SAASwB,QAAQxB,UACbC,aAAW,CACdC,YAAa,CAAC,IAAM,mBACpBC,KAPgB,UAQhBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EACzC,iIAAkIP,GACtIQ,SAAQ,CAACC,EAAOC,MACPC,WAASF,EAAO,CAAEG,eAAe,EAAOC,UAAU,EAAOd,iBAAkB,QAG3Ee,MAAIL,EAAOC,EAAKR,YAAY,OAG5Ba,MAAIN,EAAOC,EAAKR,YAAY,OAM1CF,yBExBA,SAASyB,aAAazB,UAClB,SAAS0B,iCAAiCC,EAAQC,GACrDC,oBAAkB,CACd3B,YAAa,GACbC,KAAM,eACNe,QAAS,CACLY,QAAS,2CACN9B,GAEP4B,aAAAA,EACAG,OAAQJ,EAAOK,YACf5B,UAAW,CACPI,SAASC,GACmB,iBAAVA,GAAsB,wDAAwDwB,KAAKxB,wBDR9G,SAASyB,QAAQlC,UACbC,aAAW,CACdC,YAAa,GACbC,KARiB,UASjBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EAAa,4BAA6BP,GACvFQ,SAAWC,GAAU0B,SAAO1B,EAAO,KAExCT,oBEbgB,6BCAI,mCCAG,mCCAH,2BHIpB,SAASoC,OAAOvC,EAAUC,EAAUE,UAChCC,aAAW,CACdC,YAAa,CAACL,EAAUC,GACxBK,KAPe,SAQfC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EACzC,iGAAkGP,GACtGQ,SAAQ,CAACC,EAAOC,MACPC,WAASF,EAAO,CAAEG,eAAe,EAAOC,UAAU,QAGlDC,MAAIL,EAAOC,EAAKR,YAAY,OAG5Ba,MAAIN,EAAOC,EAAKR,YAAY,OAM1CF,sBCXA,SAASqC,UAAUC,EAAgBC,EAAgBvC,UAC/CC,aAAW,CACdC,YAAa,CAACoC,EAAgBC,GAC9BpC,KAhBmB,YAiBnBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EACzC,mGAAoGP,GACxGQ,SAAQ,CAACC,EAAOC,MACPC,WAASF,EAAO,CAAEG,eAAe,EAAOC,UAAU,QAGlDC,MAAIL,EAAOC,EAAKR,YAAY,QAG5Ba,MAAIN,EAAOC,EAAKR,YAAY,OAG5BsC,QAAM/B,OAMpBT,yBC/BA,SAASyC,aAAa3B,EAAKC,EAAKf,UAC5BC,aAAW,CACdC,YAAa,CAACY,EAAKC,GACnBZ,KARsB,eAStBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EAAa,4FAA6FP,GACvJQ,SAAU,CAACC,EAAOC,MACTgC,YAAUjC,EAAOC,EAAKR,YAAY,OAGlCyC,YAAUlC,EAAOC,EAAKR,YAAY,MAMhDF,sBCjBA,SAAS4C,UAAU/C,EAAUC,EAAUE,UACnCC,aAAW,CACdC,YAAa,CAACL,EAAUC,GACxBK,KAPmB,YAQnBC,UAAW,CACPC,eAAgBC,eAAcC,GAAeA,EACzC,iIAAkIP,GACtIQ,SAAQ,CAACC,EAAOC,MACPC,WAASF,EAAO,CAAEG,eAAe,EAAOC,UAAU,EAAOd,iBAAkB,QAG3Ee,MAAIL,EAAOC,EAAKR,YAAY,OAG5Ba,MAAIN,EAAOC,EAAKR,YAAY,OAM1CF"}