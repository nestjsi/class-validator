import{ValidateBy as t,buildMessage as a,isNumber as n,min as e,max as s,isEmail as i,registerDecorator as o,isUUID as r,isInt as c,minLength as l,maxLength as m}from"class-validator";const u="InRange";function InRange(i,o,r,c){return t({constraints:[i,o,r],name:"InRange",validator:{defaultMessage:a(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have $constraint3 max decimal places.",c),validate:(t,a)=>!!n(t,{allowInfinity:!1,allowNaN:!1})&&(!!e(t,a.constraints[0])&&(!!s(t,a.constraints[1])&&!!n(t,{maxDecimalPlaces:a.constraints[2]})))}},c)}const d="IsDiscount";function IsDiscount(i){return t({constraints:[.01,99.99],name:"IsDiscount",validator:{defaultMessage:a(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.",i),validate:(t,a)=>!!n(t,{allowInfinity:!1,allowNaN:!1,maxDecimalPlaces:2})&&(!!e(t,a.constraints[0])&&!!s(t,a.constraints[1]))}},i)}const M="isEmailTidy";function IsEmailTidy(n,e){return t({constraints:[],name:"isEmailTidy",validator:{defaultMessage:a(t=>t+"$property must be an email",e),validate:t=>i(t,{allow_ip_domain:!1,allow_utf8_local_part:!1,domain_specific_validation:!0,ignore_max_length:!1})}},e)}const I="IsPrice";function IsPrice(i){return t({constraints:[.01,70368744177663.99],name:"IsPrice",validator:{defaultMessage:a(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.",i),validate:(t,a)=>!!n(t,{allowInfinity:!1,allowNaN:!1,maxDecimalPlaces:2})&&(!!e(t,a.constraints[0])&&!!s(t,a.constraints[1]))}},i)}function IsStringDate(t){return function ClassValidatorCustomIsStringDate(a,n){o({constraints:[],name:"IsStringDate",options:{message:"Date should be in [YYYY-MM-DD] format",...t},propertyName:n,target:a.constructor,validator:{validate:t=>"string"==typeof t&&/^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$/i.test(t)}})}}const g="isUUID4";function IsUUID4(n){return t({constraints:[],name:"isUUID4",validator:{defaultMessage:a(t=>t+"$property must be an UUID",n),validate:t=>r(t,4)}},n)}const f="MinMax";function MinMax(i,o,r){return t({constraints:[i,o],name:"MinMax",validator:{defaultMessage:a(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2.",r),validate:(t,a)=>!!n(t,{allowInfinity:!1,allowNaN:!1})&&(!!e(t,a.constraints[0])&&!!s(t,a.constraints[1]))}},r)}const p="MinMaxInt";function MinMaxInt(i,o,r){return t({constraints:[i,o],name:"MinMaxInt",validator:{defaultMessage:a(t=>t+"'$property' must be an integer, not be less than $constraint1, not be greater than $constraint2.",r),validate:(t,a)=>!!n(t,{allowInfinity:!1,allowNaN:!1})&&(!!e(t,a.constraints[0])&&(!!s(t,a.constraints[1])&&!!c(t)))}},r)}const b="MinMaxLength";function MinMaxLength(n,e,s){return t({constraints:[n,e],name:"MinMaxLength",validator:{defaultMessage:a(t=>t+"$property must be longer than $constraint1 characters or equal to $constraint2 characters",s),validate:(t,a)=>!!l(t,a.constraints[0])&&!!m(t,a.constraints[1])}},s)}const v="MinMaxPct";function MinMaxPct(i,o,r){return t({constraints:[i,o],name:"MinMaxPct",validator:{defaultMessage:a(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.",r),validate:(t,a)=>!!n(t,{allowInfinity:!1,allowNaN:!1,maxDecimalPlaces:2})&&(!!e(t,a.constraints[0])&&!!s(t,a.constraints[1]))}},r)}const x="^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$",$="(?:[01]d|2[0123]):(?:[012345]d)";export{u as IN_RANGE,d as IS_DISCOUNT,M as IS_EMAIL_TIDY,I as IS_PRICE,x as IS_STRING_DATE_PATTERN,$ as IS_STRING_TIME_OF_DAY,g as IS_UUID_4,InRange,IsDiscount,IsEmailTidy,IsPrice,IsStringDate,IsUUID4,f as MIN_MAX,p as MIN_MAX_INT,b as MIN_MAX_LENGTH,v as MIN_MAX_PCT,MinMax,MinMaxInt,MinMaxLength,MinMaxPct};
//# sourceMappingURL=index.mjs.map
