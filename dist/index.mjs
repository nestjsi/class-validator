import{ValidateBy as t,buildMessage as n,isNumber as a,min as e,max as s,isEmail as r,isString as o,registerDecorator as i,isNotEmpty as l,isInt as c,isUUID as u,minLength as d,maxLength as m}from"class-validator";function IsDiscount(r){return t({constraints:[.01,99.99],name:"IsDiscount",validator:{defaultMessage:n(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.",r),validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1,maxDecimalPlaces:2})&&(!!e(t,n.constraints[0])&&!!s(t,n.constraints[1]))}},r)}function IsEmailTidy(a,e){return t({constraints:[],name:"IsEmailTidy",validator:{defaultMessage:n(t=>t+"$property must be an email",e),validate:t=>r(t,{allow_ip_domain:!1,allow_utf8_local_part:!1,domain_specific_validation:!0,ignore_max_length:!1})}},e)}function IsHTMLFree(a){return t({constraints:[],name:"IsHTMLFree",validator:{defaultMessage:n(t=>t+"$property must be a string without HTML tags",a),validate:t=>!!o(t)&&/(<([^>]+)>)/g.test(t)}},a)}function IsNotBlankString(t){return function IsNotBlankStringDecorator(n,a){i({async:!1,constraints:[],name:"IsNotBlankString",options:t,propertyName:a,target:n.constructor,validator:{defaultMessage:t=>`[${t.property}] should not be a blank string`,validate:t=>o(t)&&l(t.trim())}})}}function IsNotEmptyString(t){return function IsNotEmptyStringDecorator(n,a){i({async:!1,constraints:[],name:"IsNotEmptyString",options:t,propertyName:a,target:n.constructor,validator:{defaultMessage:t=>`[${t.property}] should not be an empty string`,validate:t=>o(t)&&l(t)}})}}function IsNotNull(t){return function IsNotNullDecorator(n,a){i({async:!1,constraints:[],name:"IsNotNull",options:t,propertyName:a,target:n.constructor,validator:{defaultMessage:t=>`[${t.property}] should not be null`,validate:t=>o(t)&&l(t)}})}}const g="isPositiveInt";function IsPositiveInt(s){return t({name:"isPositiveInt",validator:{validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1})&&(!!e(t,1)&&!!c(t)),defaultMessage:n(t=>t+"$property must be a positive integer",s)}},s)}function IsPrice(r){return t({constraints:[.01,70368744177663.99],name:"IsPrice",validator:{defaultMessage:n(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.",r),validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1,maxDecimalPlaces:2})&&(!!e(t,n.constraints[0])&&!!s(t,n.constraints[1]))}},r)}function IsSingleLine(t){return function ClassValidatorCustomIsSingleLine(n,a){i({constraints:[],name:"IsSingleLine",options:{message:"The text should be a single line",...t},propertyName:a,target:n.constructor,validator:{validate:t=>"string"==typeof t&&/\r?\n|\r/g.test(t)}})}}function IsStringDate(t){return function ClassValidatorCustomIsStringDate(n,a){i({constraints:[],name:"IsStringDate",options:{message:"Date should be in [YYYY-MM-DD] format",...t},propertyName:a,target:n.constructor,validator:{validate:t=>"string"==typeof t&&/^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$/i.test(t)}})}}function IsUUID4(a){return t({constraints:[],name:"IsUUID4",validator:{defaultMessage:n(t=>t+"$property must be an UUID",a),validate:t=>u(t,4)}},a)}function InRange(r,o,i,l){return t({constraints:[r,o,i],name:"InRange",validator:{defaultMessage:n(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have $constraint3 max decimal places.",l),validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1})&&(!!e(t,n.constraints[0])&&(!!s(t,n.constraints[1])&&!!a(t,{maxDecimalPlaces:n.constraints[2]})))}},l)}function InRangeInt(a,r,o){return t({constraints:[a,r],name:"InRangeInt",validator:{defaultMessage:n(t=>t+"'$property' must be an integer, not be less than $constraint1, not be greater than $constraint2..",o),validate:(t,n)=>!!c(t)&&(!!c(n.constraints[0])&&(!!c(n.constraints[1])&&(!!e(t,n.constraints[0])&&!!s(t,n.constraints[1]))))}},o)}function MinMax(r,o,i){return t({constraints:[r,o],name:"MinMax",validator:{defaultMessage:n(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2.",i),validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1})&&(!!e(t,n.constraints[0])&&!!s(t,n.constraints[1]))}},i)}function MinMaxInt(r,o,i){return t({constraints:[r,o],name:"MinMaxInt",validator:{defaultMessage:n(t=>t+"'$property' must be an integer, not be less than $constraint1, not be greater than $constraint2.",i),validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1})&&(!!e(t,n.constraints[0])&&(!!s(t,n.constraints[1])&&!!c(t)))}},i)}function MinMaxPct(r,o,i){return t({constraints:[r,o],name:"MinMaxPct",validator:{defaultMessage:n(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.",i),validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1,maxDecimalPlaces:2})&&(!!e(t,n.constraints[0])&&!!s(t,n.constraints[1]))}},i)}const p=562949953421311;function Money(r=562949953421311,o=.01,i){return t({constraints:[o,r],name:"Money",validator:{defaultMessage:n(t=>t+"'$property' must be a number, not be less than $constraint1, not be greater than $constraint2 and have two max decimal places.",i),validate:(t,n)=>!!a(t,{allowInfinity:!1,allowNaN:!1,maxDecimalPlaces:2})&&(!!e(t,n.constraints[0])&&!!s(t,n.constraints[1]))}},i)}function FixedLength(a,e){return t({constraints:[a],name:"FixedLength",validator:{defaultMessage:n(t=>t+"$property must be equal to $constraint1 characters",e),validate:(t,n)=>{const a=String(t).trim();return!(!d(a,n.constraints[0])||!m(a,n.constraints[0]))}}},e)}function MinMaxLength(a,e,s){return t({constraints:[a,e],name:"MinMaxLength",validator:{defaultMessage:n(t=>t+"$property must be longer than $constraint1 characters or equal to $constraint2 characters",s),validate:(t,n)=>!!d(t,n.constraints[0])&&!!m(t,n.constraints[1])}},s)}const I="^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$",f="(?:[01]d|2[0123]):(?:[012345]d)";export{FixedLength,g as IS_POSITIVE_INT,I as IS_STRING_DATE_PATTERN,f as IS_STRING_TIME_OF_DAY,InRange,InRangeInt,IsDiscount,IsEmailTidy,IsHTMLFree,IsNotBlankString,IsNotEmptyString,IsNotNull,IsPositiveInt,IsPrice,IsSingleLine,IsStringDate,IsUUID4,p as MAX_SAFE_FLOAT,MinMax,MinMaxInt,MinMaxLength,MinMaxPct,Money};
//# sourceMappingURL=index.mjs.map
